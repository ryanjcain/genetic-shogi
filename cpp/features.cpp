#include "features.hpp"
#include <omp.h>

ShogiFeatures::ShogiFeatures(int player) {

    // Set the color (perspective) for the heuristic to be evaluated
    this->player = player;

    // Initialize weights to null if not provided
    weights = NULL;

    // Initialize a piece map, convert from int encoding to string
    piece_map = {
        {{PAWN, NORMAL}, "p"},
        {{LANCE, NORMAL}, "l"},
        {{KNIGHT, NORMAL}, "n"},
        {{SILVER, NORMAL}, "s"},
        {{GOLD, NORMAL}, "g"},
        {{BISHOP, NORMAL}, "b"},
        {{ROOK, NORMAL}, "r"},
        {{PAWN, UPGRADED}, "+p"},
        {{LANCE, UPGRADED}, "+l"},
        {{KNIGHT, UPGRADED}, "+n"},
        {{SILVER, UPGRADED}, "+s"},
        {{BISHOP, UPGRADED}, "+b"},
        {{ROOK, UPGRADED}, "+r"},
    };

    // Initialize the map of castle formations with hex board representations
    black_castles = {
        {"left_mino", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0007FFFFFFFFFFFFFF00FF07FFFFFFFFFF000501FFFFFFFFFFFFFF000602FFFFFFFFFF00FFFF03000000000000000000000000000000000000"},
        {"gold_fortress", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF0007FFFFFFFFFFFFFF000107FFFFFFFFFFFFFF000602FFFFFFFFFFFF00FF03000000000000000000000000000000000000"},
        {"helmet", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0007FFFFFFFFFFFFFF0006FFFFFFFFFFFF000107FFFFFFFFFFFFFF00FF02FFFFFFFFFF00FFFF03000000000000000000000000000000000000"},
        {"crab", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF07FFFFFFFFFFFFFF000106FFFFFFFFFF00FF07FFFFFFFFFFFFFF00FF02FFFFFFFFFFFF00FF03000000000000000000000000000000000000"},
        {"bonanza", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0007FFFFFFFFFFFFFF0007FFFFFFFFFFFF000106FFFFFFFFFFFFFF00FF02FFFFFFFFFFFF00FF03000000000000000000000000000000000000"},
        {"snowroof", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000107FFFFFFFFFFFF0001FF06FFFFFFFFFF00FF07FFFFFFFFFFFFFF00FF02FFFFFFFFFFFF00FF03000000000000000000000000000000000000"},
        {"silver_horns_snowroof", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF0001FFFFFFFFFFFFFFFF0007FFFFFFFFFFFF0001FF06FFFFFFFFFF00FF07FFFFFFFFFFFFFF00FF02FFFFFFFFFFFF00FF03000000000000000000000000000000000000"},
        {"right_king_1", "FFFFFFFFFF00FFFF03FFFFFFFF00FFFFFF04FFFFFFFFFF000206FFFFFFFFFFFF0001FFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"right_king_2", "FFFFFFFF00FFFFFF03FFFFFFFF00FFFFFF04FFFFFFFFFF000206FFFFFFFFFFFF000107FFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"right_king_3", "FFFFFFFFFF00FFFF03FFFFFFFF00FFFFFF04FFFFFFFFFF0002FFFFFFFFFFFFFF000106FFFFFFFFFFFFFF0007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"central_house", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0007FFFFFFFFFFFFFF0001FFFFFFFFFFFFFF0006FFFFFFFFFFFFFF0001FFFFFFFFFFFFFF0007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"nakahara", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0001FFFFFFFFFFFFFF00FF07FFFFFFFFFFFF00FF06FFFFFFFFFF00FF0701FFFFFFFFFFFF00FF02FFFFFFFFFFFF00FF03000000000000000000000000000000000000"},
        {"duck", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF07FFFFFFFFFFFF0001FFFFFFFFFFFFFF0006FFFFFFFFFFFFFF0001FFFFFFFFFFFFFF00FF07FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"paperweight", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF07FFFFFFFFFFFFFF0007FFFFFFFFFFFF000206FFFFFFFFFFFFFF0001FFFFFFFFFFFF00FF03FF000000000000000000000000000000000000"},
        {"truck", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF000107FFFFFFFFFFFF000107FFFFFFFFFFFF00FF06FFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"boat_pawn", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF07FFFFFFFFFFFFFF00FF07FFFFFFFFFF00FF0601FFFFFFFFFFFF000502FFFFFFFFFF00FFFF03000000000000000000000000000000000000"},
        {"daughter_inside_box", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000707FFFFFFFFFF00FF0601FFFFFFFFFFFF000502FFFFFFFFFF00FFFF03000000000000000000000000000000000000"},
        {"diamond", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000107FFFFFFFFFFFFFF000107FFFFFFFFFF00FF06FFFFFFFFFFFFFF000502FFFFFFFFFF00FFFF03000000000000000000000000000000000000"},
        {"strawberry", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0007FFFFFFFFFFFFFF0006FFFFFFFFFFFF00FF0701FFFFFFFFFFFF000502FFFFFFFFFF00FFFF03000000000000000000000000000000000000"},
        {"yonenaga", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF0007FFFFFFFFFFFFFF00FF07FFFFFFFFFFFF00010502FFFFFFFFFF00FF0603000000000000000000000000000000000000"},
        {"elmo", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0001FFFFFFFFFFFF00FF0607FFFFFFFFFFFF000502FFFFFFFFFF00FFFF03000000000000000000000000000000000000"},
        {"elmo_gold", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF07FFFFFFFFFFFF0001FFFFFFFFFFFF00FF0607FFFFFFFFFFFF000502FFFFFFFFFF00FFFF03000000000000000000000000000000000000"},
        {"silver_elephant_eye", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0001FFFFFFFFFFFFFF000601FFFFFFFFFFFF0002FFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"gold_elephant_eye", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0001FFFFFFFFFFFFFF000607FFFFFFFFFFFF0002FFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"kushikatsu", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFF00FF0707FFFFFFFFFFFF000102FFFFFFFFFFFF000603000000000000000000000000000000000000"},
        {"anaguma", "FFFFFFFFFFFF000306FFFFFFFFFFFF000102FFFFFFFFFFFF000707FFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"mino", "FFFFFFFFFF00FFFF03FFFFFFFFFFFF000602FFFFFFFFFFFF0001FFFFFFFFFFFFFF00FF07FFFFFFFFFFFF0007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"silver_crown", "FFFFFFFFFF00FFFF03FFFFFFFFFF000106FFFFFFFFFFFF000207FFFFFFFFFFFF0007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"wall", "FFFFFFFFFFFF00FF03FFFFFFFFFFFF00FF02FFFFFFFFFFFF0006FFFFFFFFFFFFFF000107FFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"gold_mino", "FFFFFFFFFFFF00FF03FFFFFFFFFFFF000602FFFFFFFFFFFF0007FFFFFFFFFFFFFF0001FFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"three_move", "FFFFFFFFFFFF00FF03FFFFFFFFFFFF00FF02FFFFFFFFFFFF000601FFFFFFFFFFFF0007FFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"rapid_castle", "FFFFFFFFFFFF00FF03FFFFFFFFFFFF000602FFFFFFFFFFFF000701FFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"flatfish", "FFFFFFFFFF00FFFF03FFFFFFFFFFFF000602FFFFFFFFFFFF0001FFFFFFFFFFFFFF00FF07FFFFFFFFFFFF00FF07FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"millenium_1", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF0007FFFFFFFFFFFFFF00020701FFFFFFFFFFFF00FF06FFFFFFFFFFFF00FF03000000000000000000000000000000000000"},
        {"millenium_2", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF0007FFFFFFFFFFFFFF00020701FFFFFFFFFFFF000106FFFFFFFFFFFF00FF03000000000000000000000000000000000000"},
        {"millenium_3", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF0007FFFFFFFFFFFFFF00020701FFFFFFFFFF00FF0106FFFFFFFFFF00FFFF03000000000000000000000000000000000000"},
        {"millenium_4", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF0007FFFFFFFFFFFFFF00020701FFFFFFFFFF0001FF06FFFFFFFFFFFF00FF03000000000000000000000000000000000000"},
        {"millenium_5", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0001FFFFFFFFFFFF00020707FFFFFFFFFFFF000106FFFFFFFFFFFF00FF03000000000000000000000000000000000000"},
        {"millenium_6", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0001FFFFFFFFFFFFFF000701FFFFFFFFFFFF00FF0706FFFFFFFFFF00FF0502FFFFFFFFFFFF00FF03000000000000000000000000000000000000"},
        {"gold_excelsior", "FFFFFFFFFF00FFFF03FFFFFFFFFFFF000102FFFFFFFFFFFF0006FFFFFFFFFFFFFF0007FFFFFFFFFFFFFF0007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"aerokin", "FFFFFFFFFF000603FFFFFFFFFFFF0001FFFFFFFFFFFFFF000207FFFFFFFFFFFF0007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"aerial_tower", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000102FFFFFFFFFFFF000607FFFFFFFFFFFF00FFFFFF03000000000000000000000000000000000000"},
        {"fourth_edge_king", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0001FFFFFFFFFFFFFF000702FFFFFFFFFFFF0007FFFFFFFFFFFFFF0006FFFF03000000000000000000000000000000000000"}
    };

    white_castles = {
        {"left_mino_white", "13FFFF10FFFFFFFFFF121610FFFFFFFFFFFFFF111510FFFFFFFFFF17FF10FFFFFFFFFFFFFF1710FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"gold_fortress_white", "13FF10FFFFFFFFFFFF121610FFFFFFFFFFFFFF171110FFFFFFFFFFFFFF1710FFFFFFFFFFFFFFFF10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"helmet_white", "13FFFF10FFFFFFFFFF12FF10FFFFFFFFFFFFFF171110FFFFFFFFFFFF1610FFFFFFFFFFFFFF1710FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"crab_white", "13FF10FFFFFFFFFFFF12FF10FFFFFFFFFFFFFF17FF10FFFFFFFFFF161110FFFFFFFFFFFFFF17FF10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"bonanza_white", "13FF10FFFFFFFFFFFF12FF10FFFFFFFFFFFFFF161110FFFFFFFFFFFF1710FFFFFFFFFFFFFF1710FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"snowroof_white", "13FF10FFFFFFFFFFFF12FF10FFFFFFFFFFFFFF17FF10FFFFFFFFFF16FF1110FFFFFFFFFFFF171110FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"silver_horns_snowroof_white", "13FF10FFFFFFFFFFFF12FF10FFFFFFFFFFFFFF17FF10FFFFFFFFFF16FF1110FFFFFFFFFFFF1710FFFFFFFFFFFFFFFF1110FFFFFFFFFFFFFFFF10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"right_king_1_white", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF10FFFFFFFFFFFFFF1110FFFFFFFFFFFF161210FFFFFFFFFF14FFFFFF10FFFFFFFF13FFFF10FFFFFFFFFF000000000000000000000000000000000000"},
        {"right_king_2_white", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF10FFFFFFFFFFFF171110FFFFFFFFFFFF161210FFFFFFFFFF14FFFFFF10FFFFFFFF13FFFFFF10FFFFFFFF000000000000000000000000000000000000"},
        {"right_king_3_white", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1710FFFFFFFFFFFFFF161110FFFFFFFFFFFFFF1210FFFFFFFFFF14FFFFFF10FFFFFFFF13FFFF10FFFFFFFFFF000000000000000000000000000000000000"},
        {"central_house_white", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1710FFFFFFFFFFFFFF1110FFFFFFFFFFFFFF1610FFFFFFFFFFFFFF1110FFFFFFFFFFFFFF1710FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"nakahara_white", "13FF10FFFFFFFFFFFF12FF10FFFFFFFFFFFF1117FF10FFFFFFFFFF16FF10FFFFFFFFFFFF17FF10FFFFFFFFFFFFFF1110FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"duck_white", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF17FF10FFFFFFFFFFFFFF1110FFFFFFFFFFFFFF1610FFFFFFFFFFFFFF1110FFFFFFFFFFFF17FF10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"paperweight_white", "FF13FF10FFFFFFFFFFFF1110FFFFFFFFFFFFFF161210FFFFFFFFFFFF1710FFFFFFFFFFFFFF17FF10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"truck_white", "FFFFFFFFFFFFFFFFFFFFFF10FFFFFFFFFFFFFF16FF10FFFFFFFFFFFF171110FFFFFFFFFFFF171110FFFFFFFFFFFFFFFF10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"boat_pawn_white", "13FFFF10FFFFFFFFFF121510FFFFFFFFFFFF1116FF10FFFFFFFFFF17FF10FFFFFFFFFFFFFF17FF10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"daughter_inside_box_white", "13FFFF10FFFFFFFFFF121510FFFFFFFFFFFF1116FF10FFFFFFFFFF171710FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"diamond_white", "13FFFF10FFFFFFFFFF121510FFFFFFFFFFFFFF16FF10FFFFFFFFFF171110FFFFFFFFFFFFFF171110FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"strawberry_white", "13FFFF10FFFFFFFFFF121510FFFFFFFFFFFF1117FF10FFFFFFFFFFFF1610FFFFFFFFFFFFFF1710FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"yonenaga_white", "1316FF10FFFFFFFFFF12151110FFFFFFFFFFFF17FF10FFFFFFFFFFFFFF1710FFFFFFFFFFFFFFFF10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"elmo_white", "13FFFF10FFFFFFFFFF121510FFFFFFFFFFFF1716FF10FFFFFFFFFFFF1110FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"elmo_gold_white", "13FFFF10FFFFFFFFFF121510FFFFFFFFFFFF1716FF10FFFFFFFFFFFF1110FFFFFFFFFFFF17FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"silver_elephant_eye_white", "FFFFFFFFFFFFFFFFFFFFFFFF10FFFFFFFFFFFFFF1210FFFFFFFFFFFF111610FFFFFFFFFFFFFF1110FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"gold_elephant_eye_white", "FFFFFFFFFFFFFFFFFFFFFFFF10FFFFFFFFFFFFFF1210FFFFFFFFFFFF171610FFFFFFFFFFFFFF1110FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"kushikatsu_white", "131610FFFFFFFFFFFF121110FFFFFFFFFFFF1717FF10FFFFFFFFFFFFFF10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"anaguma_white", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF10FFFFFFFFFFFF171710FFFFFFFFFFFF121110FFFFFFFFFFFF161310FFFFFFFFFFFF000000000000000000000000000000000000"},
        {"mino_white", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1710FFFFFFFFFFFF17FF10FFFFFFFFFFFFFF1110FFFFFFFFFFFF121610FFFFFFFFFFFF13FFFF10FFFFFFFFFF000000000000000000000000000000000000"},
        {"silver_crown_white", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1710FFFFFFFFFFFF171210FFFFFFFFFFFF161110FFFFFFFFFF13FFFF10FFFFFFFFFF000000000000000000000000000000000000"},
        {"wall_white", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF10FFFFFFFFFFFF171110FFFFFFFFFFFFFF1610FFFFFFFFFFFF12FF10FFFFFFFFFFFF13FF10FFFFFFFFFFFF000000000000000000000000000000000000"},
        {"gold_mino_white", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF10FFFFFFFFFFFFFF1110FFFFFFFFFFFFFF1710FFFFFFFFFFFF121610FFFFFFFFFFFF13FF10FFFFFFFFFFFF000000000000000000000000000000000000"},
        {"three_move_white", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF10FFFFFFFFFFFFFF1710FFFFFFFFFFFF111610FFFFFFFFFFFF12FF10FFFFFFFFFFFF13FF10FFFFFFFFFFFF000000000000000000000000000000000000"},
        {"rapid_castle_white", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF10FFFFFFFFFFFF111710FFFFFFFFFFFF121610FFFFFFFFFFFF13FF10FFFFFFFFFFFF000000000000000000000000000000000000"},
        {"flatfish_white", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF17FF10FFFFFFFFFFFF17FF10FFFFFFFFFFFFFF1110FFFFFFFFFFFF121610FFFFFFFFFFFF13FFFF10FFFFFFFFFF000000000000000000000000000000000000"},
        {"millenium_1_white", "13FF10FFFFFFFFFFFF16FF10FFFFFFFFFFFF11171210FFFFFFFFFFFFFF1710FFFFFFFFFFFFFFFF10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"millenium_2_white", "13FF10FFFFFFFFFFFF161110FFFFFFFFFFFF11171210FFFFFFFFFFFFFF1710FFFFFFFFFFFFFFFF10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"millenium_3_white", "13FFFF10FFFFFFFFFF1611FF10FFFFFFFFFF11171210FFFFFFFFFFFFFF1710FFFFFFFFFFFFFFFF10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"millenium_4_white", "13FF10FFFFFFFFFFFF16FF1110FFFFFFFFFF11171210FFFFFFFFFFFFFF1710FFFFFFFFFFFFFFFF10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"millenium_5_white", "13FF10FFFFFFFFFFFF161110FFFFFFFFFFFF17171210FFFFFFFFFFFF1110FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"millenium_6_white", "13FF10FFFFFFFFFFFF1215FF10FFFFFFFFFF1617FF10FFFFFFFFFFFF111710FFFFFFFFFFFFFF1110FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"gold_excelsior_white", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1710FFFFFFFFFFFFFF1710FFFFFFFFFFFFFF1610FFFFFFFFFFFF121110FFFFFFFFFFFF13FFFF10FFFFFFFFFF000000000000000000000000000000000000"},
        {"aerokin_white", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1710FFFFFFFFFFFF171210FFFFFFFFFFFFFF1110FFFFFFFFFFFF131610FFFFFFFFFF000000000000000000000000000000000000"},
        {"aerial_tower_white", "13FFFFFF10FFFFFFFFFFFF171610FFFFFFFFFFFF121110FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"},
        {"fourth_edge_king_white", "13FFFF1610FFFFFFFFFFFFFF1710FFFFFFFFFFFF121710FFFFFFFFFFFFFF1110FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000"}
    };

    // Initialize the vectors storing the upper and lower camps on the board
    //      Doing this manually because the board ordering is strange:
    //
    //          72 63 54 45 36 27 18 09 00
    //          73 64 55 46 37 28 19 10 01
    //          74 65 56 47 38 29 20 11 02
    //          75 66 57 48 39 30 21 12 03
    //          76 67 58 49 40 31 22 13 04
    //          77 68 59 50 41 32 23 14 05
    //          78 69 60 51 42 33 24 15 06
    //          79 70 61 52 43 34 25 16 07
    //          80 71 62 53 44 35 26 17 08


    gote_camp = {72, 63, 54, 45, 36, 27, 18,  9, 0,
                 73, 64, 55, 46, 37, 28, 19, 10, 1,
                 74, 65, 56, 47, 38, 29, 20, 11, 2};

    sente_camp = {78, 69, 60, 51, 42, 33, 24, 15, 6,
                  79, 70, 61, 52, 43, 34, 25, 16, 7,
                  80, 71, 62, 53, 44, 35, 26, 17, 8};

    CASTLE_THRESHOLD = 100;

    NUM_FEATURES = 20;

    // Initialize the feature vectore
    features.reserve(NUM_FEATURES);
}

vector<int> ShogiFeatures::generate_feature_vec(Shogi s) {
    // Set / Reset feature vecotr to be all 0s
    features.clear();

    // Individual feature calculations
    material(s);
    king_safety(s);
    pieces_in_hand(s);
    controlled_squares(s);
    castle(s);
    board_shape(s);

    return features;
}

// Read evolution.py to see explenation of these features
int ShogiFeatures::evaluate(Shogi s) {
    /* Evaluate the shogi position s from the perspective of root player (maximizer) */

    // Feature vector
    vector<int> fV = generate_feature_vec(s);

    // Calculate heuristic score based internal weights
    int score = 0;
    for (int i = 0; i < NUM_FEATURES; i++) {
        score += fV[i] * weights[i];
    }

    return score;
}

// VISUALLY CHECKED
void ShogiFeatures::material(Shogi& s) {
    // Counts the number of pieces the current player has and returns them in the
    //      following order: +b, +l, +n, +p, +r, +s, b, g, l, n, p, r, s,

    // Ensure that all pieces are included
    map<string, int> counts = {{"p", 0}, {"l", 0}, {"n", 0}, {"s", 0}, {"g", 0}, {"b", 0}, {"r", 0},
                              {"+p", 0}, {"+l", 0}, {"+n", 0}, {"+s", 0}, {"+b", 0}, {"+r", 0}
                              };

    // Iterate through all 40 pieces available (i == piece number)
    for (int i = 0; i < 40; i++) {
        // Skip if the piece is in the hand
        if (s.gomaPos[i] == -1) continue;

        // See if the piece belongs to the current player
        int piece_type = s.gomaKind[i];
        int id = gomakindID(piece_type);
        if (gomakindChesser(piece_type) == player && id != KING) {
            int upgrade = gomakindUP(piece_type);

            string piece = piece_map[{id, upgrade}];
            counts[piece]++;
        }
    }

    // Convert to a list of ORDERED correctly
    for (auto& entry : counts) {
        features.push_back(entry.second);
    }
}

// VISUALLY CHECKED
void ShogiFeatures::king_safety(Shogi& s) {
    // NOTE : Maybe make return the ratio instead of raw cout (threats / defenders) etc
    // or (defenders / 8) or (defense / escape) or something else?
    // Set of features that represent the overall safety of the king

    // Get all of the valid squares surrounding the king
    int opponent = (player ^ 1);
    int king_pos = (player == SENTE) ?
                    s.gomaPos[s.SENTEKINGNUM] :
                    s.gomaPos[s.GOTEKINGNUM];

    // Could be a terminal position with no king (NOTE : check correctness here!)
    if (king_pos == -1) {
        features.push_back(0);
        features.push_back(0);
        features.push_back(0);
        return;
    }

    // Find adjacent squares
    vector<int> adjacent;

    // Add adacent pieces above king as long as not in topmost row
    if (king_pos % 9 != 0) {
        int king_top = king_pos - 1;
        adjacent.insert(adjacent.end(), {king_top + 9, king_top, king_top - 9});
    }

    // Add adjacent pieces below the king as long as not in bottom most row
    if (king_pos % 9 != 8) {
        int king_bot = king_pos + 1;
        adjacent.insert(adjacent.end(), {king_bot + 9, king_bot, king_bot - 9});
    }

    // Add pieces to left and right if not off edge of board
    adjacent.push_back(king_pos + 9);
    adjacent.push_back(king_pos - 9);

    // Initialize our features
    int defenders = 0;               /* Same as 'thickness' */
    int escape_routes = 0;
    int threats = 0;

    // Loop through adj. sqrs and determine thickness, escape routes, threats
    for (auto& pos : adjacent) {
        // Skip if the position off the left or right edge of board
        if (0 <= pos and pos <= 80) {
            // Defenders
            if (s.boardChesser[pos] == player)
                defenders++;

            // Escape routes
            if (s.board[pos] == -1)
                escape_routes++;

            // Check both single and multi square moves
            threats += s.boardFixedAttacking[opponent][pos].size();
            threats += s.boardFlowAttacking[opponent][pos].size();
        }
    }

    // Add to our feature vector
    features.push_back(defenders);
    features.push_back(escape_routes);
    features.push_back(threats);
    /* if (print) { */
    /*     cout << "Defenders: " << defenders << endl; */
    /*     cout << "Escape: " << escape_routes << endl; */
    /*     cout << "Threats: " << threats << endl; */
    /* } */
    /* print = false; */
}

// VISUALLY CHECKED
void ShogiFeatures::pieces_in_hand(Shogi& s) {

    // int player = (s.round & 1);
    int piece_cnt = 0;

    // 0-7 are Sente piece in hand queues, 8-15 are Gote
    for (int i = 0; i < 8; i++) {
        int I = i + player * 8;
        piece_cnt += s.gomaTable[I].size();
    }

    features.push_back(piece_cnt);
}

// VISUALLY CHECKED
void ShogiFeatures::controlled_squares(Shogi& s) {

    // Initialize opponent based on perspective of the heuristic
    int opponent = (player ^ 1);

    // Initialize the camps based on the player
    vector<int>& home_camp = (player == SENTE) ? sente_camp : gote_camp;
    vector<int>& oppn_camp = (player == SENTE) ? gote_camp  : sente_camp;

    // Find "in-camp-vulnerability", num of squares in home camp that are more
    // attacked than defended
    int vulnerable = 0;
    for (int pos : home_camp) {
        int piece = s.board[pos];
        if (piece == -1) continue; /* skip if empty */

        if (s.boardChesser[pos] == player) {
            int attackers = 0;
            int defenders = 0;

            attackers += s.boardFixedAttacking[opponent][pos].size();
            attackers += s.boardFlowAttacking[opponent][pos].size();
            defenders += s.boardFixedAttacking[player][pos].size();
            defenders += s.boardFlowAttacking[player][pos].size();

            if (attackers > defenders) {
                /* if (print) cout << "Vulnerable: " << pos << endl; */
                vulnerable++;
            }
        }
    }


    // Maybe include in camp freedom as another feature?
    /* int in_camp_freedom = 0; */
    /* for (int pos : home_camp) { */
    /*     int piece = s.board[pos]; */
    /*     if (piece == -1 /1* empty square *1/ */
    /*         && s.boardFixedAttacking[opponent][pos].size() == 0 */
    /*         && s.boardFlowAttacking[opponent][pos].size() == 0) { */
    /*             in_camp_freedom++; */
    /*         } */
    /* } */

    // Find "out-camp-attack", num of squares in opp camp that are
    //  current player is attacking more than the opponent is defending
    int attacking = 0;
    for (int pos : oppn_camp) {
        int piece = s.board[pos];
        if (piece == -1) continue; /* skip if empty */

        if (s.boardChesser[pos] == opponent) {
            int attackers = 0;
            int defenders = 0;

            attackers += s.boardFixedAttacking[player][pos].size();
            attackers += s.boardFlowAttacking[player][pos].size();
            defenders += s.boardFixedAttacking[opponent][pos].size();
            defenders += s.boardFlowAttacking[opponent][pos].size();

            if (attackers > defenders) {
                /* if (print) cout << "Attacking pos: " << pos << endl; */
                attacking++;
            }
        }
    }

    // Add results to the feature vector
    features.push_back(vulnerable);
    features.push_back(attacking);

    /* if (print and (attacking > 0 or vulnerable > 0)) { */
    /*   s.EasyBoardPrint(); */
    /*   cout << "perspective: " << player << endl; */
    /*   cout << "Attacking: " << attacking << endl; */
    /*   cout << "Vulnerable: " << vulnerable << endl; */
    /*   print_vec(home_camp_occupied); */
    /*   cout << endl; */
    /* } */

    /* print = false; */
}

// VISUALLY CHECKED
void ShogiFeatures::castle(Shogi& s) {

    map<string, string>& castles = (player == SENTE) ?
                                    black_castles : white_castles;

    int king_pos = (player == SENTE) ?
                s.gomaPos[s.SENTEKINGNUM] :
                s.gomaPos[s.GOTEKINGNUM];

    // Determine if we are within the threshold of at least one proper castle
    int closest_match = 0;
    /* string name = ""; */
    /* Shogi best_castle; */
    /* int best_castle_size = 0; */
    for (auto& entry : castles) {
        auto board = entry.second;

        // Ineffecient, but initialize a shogi object of the castle
        Shogi c;
        c.Init();
        c.LoadGame(load_hex_vector(board));

        int castle_king = (player == SENTE) ?
            c.gomaPos[c.SENTEKINGNUM] :
            c.gomaPos[c.GOTEKINGNUM];


        // Only consider a potential castle formation if player's king in correct spot
        if (king_pos != castle_king) continue;

        // See if other pieces are within the threshold
        int correct = 0;
        int total_castle_pieces = 0;
        for (int pos = 0; pos < 81; pos++) {

            // Skip if castle square empty
            if (c.board[pos] == -1) continue;
            total_castle_pieces++;

            // Ignore king position in count since checked above
            if (pos == castle_king) continue;

            // Skip if castle has a piece at square but player's is empty
            if (s.board[pos] == -1) continue;

            // Otherwise player has a piece in same square as castle, check if same piece
            int castle_gomaNum = c.board[pos];
            int player_gomaNum = s.board[pos];
            int castle_gomaKind = c.gomaKind[castle_gomaNum];
            int player_gomaKind = s.gomaKind[player_gomaNum];

            if (player_gomaKind == castle_gomaKind)
                correct++;
        }

        // See if current castle better than best so far
        if (correct > closest_match) {
            closest_match = correct;
            /* name = entry.first; */
            /* best_castle_size = total_castle_pieces; */
        }
    }

    /* if (closest_match > 0 and print) { */
    /*     s.EasyBoardPrint(); */
    /*     cout << "--- " << name << " ---" << endl; */
    /*     Shogi c; */
    /*     c.Init(); */
    /*     c.LoadGame(load_hex_vector(castles[name])); */
    /*     c.EasyBoardPrint(); */

    /*     cout << "Correct: " << closest_match << endl; */
    /*     cout << "Castle Size: " << best_castle_size << endl; */
    /* } */

    // Add the number of matching pieces in the closest castle formation to feature vector
    features.push_back(closest_match);

    /* print = false; */
}

void ShogiFeatures::board_shape(Shogi& s) {
    // Not implemented yet, see features.py to see shapes
    return;
}


